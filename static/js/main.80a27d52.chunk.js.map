{"version":3,"sources":["components/Desk/Desk.js","components/CreateDesk/CreateDesk.js","components/DeskList/DeskList.js","components/Column/Column.js","components/ColumnList/ColumnList.js","App.js","index.js"],"names":["Desk","id","deleteDesk","name","goToColumns","onClick","bind","className","CreateDesk","update","useState","show","setShow","inpValue","setInpValue","createDesk","trim","length","alert","firebase","firestore","collection","add","then","docRef","get","doc","data","catch","error","console","log","onKeyDown","e","keyCode","autoFocus","type","value","onChange","target","DeskList","props","desks","setDesks","history","push","deleteDesks","delete","removeId","filter","useEffect","querySnapshot","dataDesks","forEach","map","desk","Column","deleteColumn","createColumnBool","updateColumns","deskId","createColumn","ColumnList","columns","setColumns","match","params","where","dataColumns","column","App","routes","path","exact","component","route","index","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oYAuBeA,EAlBF,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACpC,OACE,sBAAKC,QAASD,EAAYE,KAAK,EAAML,GAAKM,UAAU,OAApD,UACE,qBAAKF,QAASH,EAAWI,KAAK,EAAML,GAAKM,UAAU,eAAnD,eAGCJ,M,yBC2DQK,EAhEI,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACTC,oBAAS,GADA,mBAC1BC,EAD0B,KACpBC,EADoB,OAEDF,mBAAS,IAFR,mBAE1BG,EAF0B,KAEhBC,EAFgB,KAI3BC,EAAa,WACjB,IAAKF,EAASG,OAAOC,OAEnB,OADAC,MAAM,0FACC,KAGEC,IAASC,YACjBC,WAAW,SACXC,IAAI,CACHnB,KAAMU,IAEPU,MAAK,SAACC,GAAD,OAAYA,EAAOC,SACxBF,MAAK,SAACG,GACLjB,EAAO,aACLR,GAAIyB,EAAIzB,IACLyB,EAAIC,YAGVJ,MAAK,kBAAMT,EAAY,OACvBc,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,OAOlC,OAAIlB,EAEA,sBAAKJ,UAAU,iBAAf,UACE,0GACA,uBACEyB,UAAW,SAACC,GACQ,KAAdA,EAAEC,SACJnB,KAGJoB,WAAS,EACTC,KAAK,OACLC,MAAOxB,EACPyB,SAAU,SAACL,GACTnB,EAAYmB,EAAEM,OAAOF,UAGzB,wBAAQhC,QAASU,EAAWT,KAAK,GAAjC,wDACA,wBAAQD,QAAS,kBAAMO,GAAQ,IAA/B,iEAMJ,qBAAKP,QA5BY,WACjBO,GAAQ,IA2BiBN,KAAK,GAAOC,UAAU,aAA/C,wFCKWiC,G,MA1DE,SAACC,GAAW,IAAD,EACA/B,mBAAS,IADT,mBACnBgC,EADmB,KACZC,EADY,KAGpBvC,EAAc,SAACH,GACnBwC,EAAMG,QAAQC,KAAd,gBAA4B5C,KAUxB6C,EAAc,SAAC7C,GACRkB,IAASC,YAEjBC,WAAW,SACXK,IAAIzB,GACJ8C,SACAxB,MAAK,kBATWyB,EASO/C,EAR1B0C,EAASD,EAAMO,QAAO,qBAAGhD,KAAgB+C,MADvB,IAACA,KAUhBpB,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,OAmBpC,OAhBAqB,qBAAU,WACG/B,IAASC,YACjBC,WAAW,SACXI,MACAF,MAAK,SAAC4B,GACL,IAAMC,EAAY,GAClBD,EAAcE,SAAQ,SAAC3B,GACrB0B,EAAUP,KAAK,CACb5C,GAAIyB,EAAIzB,GACRE,KAAMuB,EAAIC,OAAOxB,UAGrBwC,EAASS,QAEZ,IAGD,sBAAK7C,UAAU,WAAf,UACGmC,EAAMY,KAAI,SAACC,GACV,OACE,cAAC,EAAD,CACEnD,YAAaA,EACbH,GAAIsD,EAAKtD,GACTC,WAAY4C,EACZ3C,KAAMoD,EAAKpD,MACNoD,EAAKtD,OAIhB,cAAC,EAAD,CAAYQ,OA9CI,SAAC8C,GACnBZ,EAAS,GAAD,mBAAKD,GAAL,CAAYa,aCmETC,G,MA5EA,SAAC,GAOT,IANLvD,EAMI,EANJA,GACAE,EAKI,EALJA,KACAsD,EAII,EAJJA,aACAC,EAGI,EAHJA,iBACAC,EAEI,EAFJA,cACAC,EACI,EADJA,OACI,EACoBlD,oBAAS,GAD7B,mBACGC,EADH,KACSC,EADT,OAE4BF,mBAAS,IAFrC,mBAEGG,EAFH,KAEaC,EAFb,KA2BJ,OAAIH,EAEA,sBAAKJ,UAAU,cAAf,UACE,4BAAIJ,IACJ,uBACEiC,KAAK,OACLD,WAAS,EACTE,MAAOxB,EACPyB,SAAU,SAACL,GAAD,OAAOnB,EAAYmB,EAAEM,OAAOF,UAExC,wBAAQhC,QAAS,kBAjCF,WACnB,IAAKQ,EAASG,OAAOC,OAEnB,OADAC,MAAM,0FACC,KAGEC,IAASC,YACjBC,WAAW,WACXC,IAAI,CACHnB,KAAMU,EACN+C,OAAQA,IAETrC,MAAK,SAACC,GAAD,OAAYA,EAAOC,SACxBF,MAAK,SAACG,GACLiC,EAAc,aACZ1D,GAAIyB,EAAIzB,IACLyB,EAAIC,YAGVJ,MAAK,kBAAMT,EAAY,OACvBc,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAaLgC,IAAvB,wDACA,wBAAQxD,QAAS,kBAAMO,GAAQ,IAA/B,iEAKF8C,EAEA,qBAAKrD,QAAS,kBAAMO,GAAQ,IAAOL,UAAU,gBAA7C,SACGJ,IAKL,sBAAKI,UAAU,SAAf,UACGJ,EACD,qBAAKE,QAASoD,EAAanD,K,UAAWL,GAAKM,UAAU,eAArD,oBCASuD,G,MA5DI,SAACrB,GAAW,IAAD,EACE/B,mBAAS,IADX,mBACrBqD,EADqB,KACZC,EADY,KAGtBJ,EAASnB,EAAMwB,MAAMC,OAAOjE,GAS5BwD,EAAe,SAACxD,GACTkB,IAASC,YACjBC,WAAW,WACXK,IAAIzB,GACJ8C,SACAxB,MAAK,kBARayB,EAQO/C,EAP5B+D,EAAWD,EAAQd,QAAO,qBAAGhD,KAAgB+C,MADzB,IAACA,KASlBpB,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,OAuBpC,OApBAqB,qBAAU,WACG/B,IAASC,YACjBC,WAAW,WACX8C,MAAM,SAAU,KAAMP,GACtBnC,MACAF,MAAK,SAAC4B,GACL,IAAMiB,EAAc,GACpBjB,EAAcE,SAAQ,SAAC3B,GAAS,IAAD,EACJA,EAAIC,OAArBxB,EADqB,EACrBA,KAAMyD,EADe,EACfA,OACdQ,EAAYvB,KAAK,CACf5C,GAAIyB,EAAIzB,GACRE,KAAMA,EACNyD,OAAQA,OAIZI,EAAWI,QAEd,IAGD,sBAAK7D,UAAU,aAAf,UACGwD,EAAQT,KAAI,SAACe,GAAD,OACX,cAAC,EAAD,CACEpE,GAAIoE,EAAOpE,GACXwD,aAAcA,EAEdtD,KAAMkE,EAAOlE,MADRkE,EAAOpE,OAIhB,cAAC,EAAD,CACE2D,OAAQA,EACRD,cAhDgB,SAACU,GACrBL,EAAW,GAAD,mBAAKD,GAAL,CAAcM,MAgDpBX,kBAAkB,EAClBvD,KAAK,6E,MCtBEmE,MA/Bf,WACE,IAAMC,EAAS,CACb,CACEC,KAAM,IACNC,OAAO,EACPC,UAAWlC,GAEb,CAAEgC,KAAM,YAAaC,OAAO,EAAMC,UAAWZ,IAG/C,OACE,cAAC,IAAD,UACE,sBAAKvD,UAAU,MAAf,UACE,+CACA,cAAC,IAAD,UACGgE,EAAOjB,KAAI,SAACqB,EAAOC,GAClB,OACE,cAAC,IAAD,CACEH,MAAOE,EAAMF,MAEbD,KAAMG,EAAMH,KACZE,UAAWC,EAAMD,WAFZE,c,MCLrBzD,IAAS0D,cAXc,CACrBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,mDACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjBlE,IAASmE,YAETC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.80a27d52.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Desk.css'\r\n\r\nconst Desk = ({ id, deleteDesk, name, goToColumns }) => {\r\n  return (\r\n    <div onClick={goToColumns.bind(this, id)} className=\"Desk\">\r\n      <div onClick={deleteDesk.bind(this, id)} className=\"Desk__delete\">\r\n        X\r\n      </div>\r\n      {name}\r\n    </div>\r\n  )\r\n}\r\n\r\nDesk.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  deleteDesk: PropTypes.func.isRequired,\r\n  goToColumns: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Desk\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport firebase from 'firebase/app'\r\n\r\nimport './CreateDesk.css'\r\n\r\nconst CreateDesk = ({ update }) => {\r\n  const [show, setShow] = useState(false)\r\n  const [inpValue, setInpValue] = useState('')\r\n\r\n  const createDesk = () => {\r\n    if (!inpValue.trim().length) {\r\n      alert('найс пустое поле')\r\n      return null\r\n    }\r\n\r\n    const db = firebase.firestore()\r\n    db.collection('desks')\r\n      .add({\r\n        name: inpValue,\r\n      })\r\n      .then((docRef) => docRef.get()) //делает return\r\n      .then((doc) => {\r\n        update({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        })\r\n      })\r\n      .then(() => setInpValue(''))\r\n      .catch((error) => console.log(error))\r\n  }\r\n\r\n  const showCreate = () => {\r\n    setShow(true)\r\n  }\r\n\r\n  if (show) {\r\n    return (\r\n      <div className=\"CreateShowDesk\">\r\n        <p>Создать доску</p>\r\n        <input\r\n          onKeyDown={(e) => {\r\n            if (e.keyCode === 13) {\r\n              createDesk()\r\n            }\r\n          }}\r\n          autoFocus\r\n          type=\"text\"\r\n          value={inpValue}\r\n          onChange={(e) => {\r\n            setInpValue(e.target.value)\r\n          }}\r\n        />\r\n        <button onClick={createDesk.bind(this)}>Создать</button>\r\n        <button onClick={() => setShow(false)}>Отменить</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div onClick={showCreate.bind(this)} className=\"CreateDesk\">\r\n      Создать доску\r\n    </div>\r\n  )\r\n}\r\n\r\nCreateDesk.propTypes = {\r\n  update: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default CreateDesk\r\n","import React, { useState, useEffect } from 'react'\r\nimport firebase from 'firebase/app'\r\nimport Desk from '../Desk/Desk'\r\nimport CreateDesk from '../CreateDesk/CreateDesk'\r\n\r\nimport './DeskList.css'\r\n\r\nconst DeskList = (props) => {\r\n  const [desks, setDesks] = useState([])\r\n\r\n  const goToColumns = (id) => {\r\n    props.history.push(`/list/${id}`)\r\n  }\r\n\r\n  const updateDesks = (desk) => {\r\n    setDesks([...desks, desk])\r\n  }\r\n\r\n  const removeDesks = (removeId) =>\r\n    setDesks(desks.filter(({ id }) => id !== removeId))\r\n\r\n  const deleteDesks = (id) => {\r\n    const db = firebase.firestore()\r\n\r\n    db.collection('desks')\r\n      .doc(id)\r\n      .delete()\r\n      .then(() => removeDesks(id))\r\n      .catch((error) => console.error(error))\r\n  }\r\n\r\n  useEffect(() => {\r\n    const db = firebase.firestore()\r\n    db.collection('desks')\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        const dataDesks = []\r\n        querySnapshot.forEach((doc) => {\r\n          dataDesks.push({\r\n            id: doc.id,\r\n            name: doc.data().name,\r\n          })\r\n        })\r\n        setDesks(dataDesks)\r\n      })\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"DeskList\">\r\n      {desks.map((desk) => {\r\n        return (\r\n          <Desk\r\n            goToColumns={goToColumns}\r\n            id={desk.id}\r\n            deleteDesk={deleteDesks}\r\n            name={desk.name}\r\n            key={desk.id}\r\n          />\r\n        )\r\n      })}\r\n      <CreateDesk update={updateDesks} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DeskList\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport firebase from 'firebase/app'\r\n\r\nimport './Column.css'\r\n\r\nconst Column = ({\r\n  id,\r\n  name,\r\n  deleteColumn,\r\n  createColumnBool,\r\n  updateColumns,\r\n  deskId,\r\n}) => {\r\n  const [show, setShow] = useState(false)\r\n  const [inpValue, setInpValue] = useState('')\r\n\r\n  const createColumn = () => {\r\n    if (!inpValue.trim().length) {\r\n      alert('найс пустое поле')\r\n      return null\r\n    }\r\n\r\n    const db = firebase.firestore()\r\n    db.collection('columns')\r\n      .add({\r\n        name: inpValue,\r\n        deskId: deskId,\r\n      })\r\n      .then((docRef) => docRef.get()) //делает return\r\n      .then((doc) => {\r\n        updateColumns({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        })\r\n      })\r\n      .then(() => setInpValue(''))\r\n      .catch((error) => console.log(error))\r\n  }\r\n\r\n  if (show) {\r\n    return (\r\n      <div className=\"Column Form\">\r\n        <p>{name}</p>\r\n        <input\r\n          type=\"text\"\r\n          autoFocus\r\n          value={inpValue}\r\n          onChange={(e) => setInpValue(e.target.value)}\r\n        />\r\n        <button onClick={() => createColumn()}>Создать</button>\r\n        <button onClick={() => setShow(false)}>отменить</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (createColumnBool) {\r\n    return (\r\n      <div onClick={() => setShow(true)} className=\"Column create\">\r\n        {name}\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <div className=\"Column\">\r\n      {name}\r\n      <div onClick={deleteColumn.bind(this, id)} className=\"Desk__delete\">\r\n        X\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nColumn.propTypes = {\r\n  id: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  deleteColumn: PropTypes.func,\r\n  createColumnBool: PropTypes.bool,\r\n  updateColumns: PropTypes.func,\r\n  deskId: PropTypes.string,\r\n}\r\n\r\nexport default Column\r\n","import React, { useEffect, useState } from 'react'\r\nimport firebase from 'firebase/app'\r\nimport Column from '../Column/Column'\r\n\r\nimport './ColumnList.css'\r\n\r\nconst ColumnList = (props) => {\r\n  const [columns, setColumns] = useState([])\r\n\r\n  const deskId = props.match.params.id\r\n\r\n  const updateColumns = (column) => {\r\n    setColumns([...columns, column])\r\n  }\r\n\r\n  const removeColumns = (removeId) =>\r\n    setColumns(columns.filter(({ id }) => id !== removeId))\r\n\r\n  const deleteColumn = (id) => {\r\n    const db = firebase.firestore()\r\n    db.collection('columns')\r\n      .doc(id)\r\n      .delete()\r\n      .then(() => removeColumns(id))\r\n      .catch((error) => console.error(error))\r\n  }\r\n\r\n  useEffect(() => {\r\n    const db = firebase.firestore()\r\n    db.collection('columns')\r\n      .where('deskId', '==', deskId)\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        const dataColumns = []\r\n        querySnapshot.forEach((doc) => {\r\n          const { name, deskId } = doc.data()\r\n          dataColumns.push({\r\n            id: doc.id,\r\n            name: name,\r\n            deskId: deskId,\r\n          })\r\n        })\r\n\r\n        setColumns(dataColumns)\r\n      })\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"ColumnList\">\r\n      {columns.map((column) => (\r\n        <Column\r\n          id={column.id}\r\n          deleteColumn={deleteColumn}\r\n          key={column.id}\r\n          name={column.name}\r\n        />\r\n      ))}\r\n      <Column\r\n        deskId={deskId}\r\n        updateColumns={updateColumns}\r\n        createColumnBool={true}\r\n        name=\"Создать лист\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\nexport default ColumnList\r\n","import React from 'react'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport DeskList from './components/DeskList/DeskList'\nimport ColumnList from './components/ColumnList/ColumnList'\n\nimport './App.css'\n\nfunction App() {\n  const routes = [\n    {\n      path: '/',\n      exact: true,\n      component: DeskList,\n    },\n    { path: '/list/:id', exact: true, component: ColumnList },\n  ]\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <h1>My Trello App</h1>\n        <Switch>\n          {routes.map((route, index) => {\n            return (\n              <Route\n                exact={route.exact}\n                key={index}\n                path={route.path}\n                component={route.component}\n              />\n            )\n          })}\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport firebase from 'firebase/app'\nimport 'firebase/analytics'\nimport 'firebase/auth'\nimport 'firebase/firestore'\n\nimport App from './App'\n\nimport './index.css'\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyA7yYX44D8IkrcCdClrhK0mxz2B91kOCuU',\n  authDomain: 'trello-e73bd.firebaseapp.com',\n  databaseURL: 'https://trello-e73bd-default-rtdb.firebaseio.com',\n  projectId: 'trello-e73bd',\n  storageBucket: 'trello-e73bd.appspot.com',\n  messagingSenderId: '695558317459',\n  appId: '1:695558317459:web:6769ef5cc63d6996a6b466',\n  measurementId: 'G-YEPPQX27WJ',\n}\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig)\nfirebase.analytics()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}